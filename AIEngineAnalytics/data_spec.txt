Experiment 1:

Folder Name: 2xSimulations
File name: {longer_time}_{dimension}_{game_number}.json
Notes:
    - No leading 0's
    - Game number from 0-9 (10 total games for each longer_time/dimension combo)
    - Dimension from 4-8 (5 total dimensions for each longer_time)
    - Longer times = [1, 2, 4, 8, 16] (5 total)
    - Corresponding shorter times are [0.5, 1, 2, 4, 8] (half each time hence the name 2xSimulations)
    - So a total of 10x5x5 = 250 games
    - Each game should use 4 in a row with standard root(2) for c parameter
    

   

Experiment 2:
Folder Name: EqualTimeSimulations
File name: {time}_{dimension}_{game_number}.json
Notes:
    - No leading 0's
    - Game number from 0-4 (5 total games for each time/dimension combo)
    - Dimension from 5-12 (8 total dimensions)
    - Times = [2, 4, 6, 8] (4 times)
    - So a total of 5x8x4 = 160 games
    - Each game should use 5 in a row with standard root(2) for c parameter 
    
    
JSON Representation for a simulated game
{'winner': winning_time, 'p1': time for p1, 'p2': time for p2, 'moves': [{'simulations': number of sims, 'stats': [{'pts': first stat, 'attempts': second stat}, ...]}, ...]}
winning_time is 0 if draw